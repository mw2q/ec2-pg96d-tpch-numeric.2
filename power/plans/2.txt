BEGIN;
BEGIN
EXPLAIN
select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	part,
	supplier,
	partsupp,
	nation,
	region
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 14
	and p_type like '%NICKEL'
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'AFRICA'
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			partsupp,
			supplier,
			nation,
			region
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = 'AFRICA'
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
LIMIT 100;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=14230920.09..14230920.10 rows=1 width=192)
   ->  Sort  (cost=14230920.09..14230920.10 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Merge Join  (cost=9851095.99..14230920.08 rows=1 width=192)
               Merge Cond: (part.p_partkey = partsupp.ps_partkey)
               Join Filter: (partsupp.ps_supplycost = (SubPlan 1))
               ->  Index Scan using pk_part on part  (cost=0.44..1028958.44 rows=80065 width=30)
                     Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 14))
               ->  Materialize  (cost=9851095.52..9931095.52 rows=16000000 width=172)
                     ->  Sort  (cost=9851095.52..9891095.52 rows=16000000 width=172)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=45110.53..3835007.53 rows=16000000 width=172)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Seq Scan on partsupp  (cost=0.00..2543959.00 rows=80000000 width=14)
                                 ->  Hash  (cost=37922.53..37922.53 rows=200000 width=166)
                                       ->  Hash Join  (cost=2.53..37922.53 rows=200000 width=166)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Seq Scan on supplier  (cost=0.00..32170.00 rows=1000000 width=144)
                                             ->  Hash  (cost=2.47..2.47 rows=5 width=30)
                                                   ->  Hash Join  (cost=1.07..2.47 rows=5 width=30)
                                                         Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AFRICA'::bpchar)
               SubPlan 1
                 ->  Aggregate  (cost=50.48..50.49 rows=1 width=6)
                       ->  Nested Loop  (cost=2.07..50.48 rows=1 width=6)
                             Join Filter: (supplier_1.s_nationkey = nation_1.n_nationkey)
                             ->  Hash Join  (cost=1.07..2.47 rows=5 width=4)
                                   Hash Cond: (nation_1.n_regionkey = region_1.r_regionkey)
                                   ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                                   ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                         ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                               Filter: (r_name = 'AFRICA'::bpchar)
                             ->  Materialize  (cost=0.99..47.72 rows=4 width=10)
                                   ->  Nested Loop  (cost=0.99..47.70 rows=4 width=10)
                                         ->  Index Scan using pk_partsupp on partsupp partsupp_1  (cost=0.57..13.89 rows=4 width=10)
                                               Index Cond: (part.p_partkey = ps_partkey)
                                         ->  Index Scan using pk_supplier on supplier supplier_1  (cost=0.42..8.44 rows=1 width=8)
                                               Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
(41 rows)

COMMIT;
COMMIT
